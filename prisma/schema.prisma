generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int        @id @default(autoincrement())
  fullName  String
  email     String
  phone     String     @unique
  regionId  Int
  password  String
  role      Role       @default(USER_FIZ)
  companyId Int?
  img       String
  status    UserStatus @default(INACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  company CompanyInformation? @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  region  Regions             @relation(fields: [regionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  master  Master[]
  session Session[]
  order   Order[]
}

model CompanyInformation {
  id     Int    @id @default(autoincrement())
  INN    String
  MFO    String
  R_S    String
  BANK   String
  OKEYD  String
  ADRESS String

  user Users[]
}

model Regions {
  id      Int    @id @default(autoincrement())
  name_uz String
  name_ru String
  name_en String

  user Users[]
}

model Session {
  id       Int      @id @default(autoincrement())
  userId   Int
  IpAdress String
  info     Json
  date     DateTime @default(now())

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Order {
  id           Int         @id @default(autoincrement())
  userId       Int
  adress       String
  latitude     String
  longitude    String
  date         DateTime    @default(now())
  totalPrice   String
  isPaid       Boolean     @default(false)
  paymentType  PaymentType @default(CASH)
  withDelivery Boolean
  status       OrderStatus @default(PENDING)

  user Users @relation(fields: [userId], references: [id])

  orderProduct OrderProduct[]
  orderTool    OrderTool[]
  comment      Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderProduct {
  id           Int      @id @default(autoincrement())
  orderId      Int
  professionId Int
  levelId      Int
  quantity     Int      @default(1)
  timeUnit     TimeUnit
  workingTime  Float
  price        Int

  order      Order      @relation(fields: [orderId], references: [id])
  profession Profession @relation(fields: [professionId], references: [id])

  leavel Level[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderTool {
  id          Int      @id @default(autoincrement())
  orderId     Int
  toolId      Int
  quantity    Int      @default(1)
  timeUnit    TimeUnit
  workingTime Float
  price       Int

  order Order @relation(fields: [orderId], references: [id])
  tool  Tool  @relation(fields: [toolId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id         Int    @id @default(autoincrement())
  message_uz String
  message_ru String
  message_en String
  stars      Float
  orderId    Int

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id      Int    @id @default(autoincrement())
  name_uz String
  name_ru String
  name_en String

  tools Tool[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Size {
  id      Int    @id @default(autoincrement())
  name_uz String
  name_ru String
  name_en String

  tools Tool[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Power {
  id      Int    @id @default(autoincrement())
  name_uz String
  name_ru String
  name_en String

  tools Tool[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tool {
  id             Int     @id @default(autoincrement())
  name_uz        String
  name_ru        String
  name_en        String
  description_uz String
  description_ru String
  description_en String
  price          String
  quantity       Int
  code           Int     @unique
  brandId        Int
  powerId        Int
  sizeId         Int
  img            String
  isAvailable    Boolean @default(true)

  professionTools ProfessionTool[]
  ordeeTools      OrderTool[]

  brand Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)
  power Power @relation(fields: [powerId], references: [id], onDelete: Cascade)
  size  Size  @relation(fields: [sizeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Master {
  id          Int     @id @default(autoincrement())
  fullName    String
  phoneNumber String
  isActive    Boolean @default(true)
  birthYear   String
  img         String
  passportImg String
  about       String
  userId      Int

  masterProfession MasterProfession[]

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MasterProfession {
  id              Int     @id @default(autoincrement())
  professionId    Int
  minWorkingHours Float
  levelId         Int
  priceHourly     String
  priceDaily      String
  experience      Float
  masterId        Int

  profession Profession @relation(fields: [professionId], references: [id], onDelete: Cascade)
  level      Level      @relation(fields: [levelId], references: [id], onDelete: Cascade)
  master     Master     @relation(fields: [masterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Level {
  id      Int    @id @default(autoincrement())
  name_uz String
  name_ru String
  name_en String

  masterProfessions MasterProfession[]
  professionLevels  ProfessionLevel[]
  orderProductLevel OrderProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profession {
  id              Int     @id @default(autoincrement())
  name_uz         String
  name_ru         String
  name_en         String
  img             String
  minWorkingHours String
  priceHourly     String
  priceDaily      String

  masterProfessions MasterProfession[]
  professionLevels  ProfessionLevel[]
  professionTools   ProfessionTool[]
  orderProducts     OrderProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfessionLevel {
  id           Int @id @default(autoincrement())
  professionId Int
  levelId      Int

  profession Profession @relation(fields: [professionId], references: [id], onDelete: Cascade)
  level      Level      @relation(fields: [levelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfessionTool {
  id           Int @id @default(autoincrement())
  professionId Int
  toolId       Int

  profession Profession @relation(fields: [professionId], references: [id], onDelete: Cascade)
  tool       Tool       @relation(fields: [toolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  SUPER_ADMIN
  VIEWER_ADMIN
  USER_FIZ
  USER_YUR
  MASTER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum TimeUnit {
  HOURLY
  DAILY
}

enum OrderStatus {
  PENDING
  ACCEPTED
}

enum PaymentType {
  CASH
  CLICK
  PAYME
}

model Info {
  id    String   @id @default(uuid())
  email String
  links Json
  phone String[]
}

model Contact {
  id        String   @id @default(uuid())
  full_name String
  phone     String
  address   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Showcase {
  id             String @id @default(uuid())
  name_uz        String
  name_ru        String
  name_en        String
  description_uz String
  description_ru String
  description_en String
  image          String
  link           String
}

model Partners {
  id      String @id @default(uuid())
  name_uz String
  name_ru String
  name_en String
  image   String
}
